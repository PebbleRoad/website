/*------------------------------------*\
    MIXINS
\*------------------------------------*/

@mixin beta{
    @include font-size(28px, false);

    @include media(medium){
        @include font-size(30px, false);
    }
}

@mixin gamma{
    @include font-size(24px, false);

    @include media(medium){
        @include font-size(26px, false);
    }
}

@mixin delta{
    @include font-size(20px, false);

    @include media(medium){

        @include font-size(20px, false);
    }
}

/**
 * Clearfix
 */

@mixin clearfix{  
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}


@mixin appearance($value){
  -webkit-appearance: $value;
  -ms-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}



/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
@mixin headings($from: 1, $to: 6){
    %base-heading {
        @content
    }

    @if $from >= 1 and $to <= 6{
        @for $i from $from through $to{
            h#{$i}{
                @extend %base-heading;
            }
        }
    }
}

/**
 * Link Colors: Part of Compass
 */

@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
  color: $normal;
  @if $visited {
  &:visited {
    color: $visited; } }
  @if $focus {
  &:focus {
    color: $focus; } }
  @if $hover {
  &:hover {
    color: $hover; } }
  @if $active {
  &:active {
    color: $active; } } }


/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size, $line-height:true){
    font-size:$font-size;
    font-size:($font-size / $base-font-size)*1rem;
    @if $line-height == true{
        line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}


/**
 * Font size mixin
 */

@mixin font-size-adapt($mobile: false, $tablet: false, $desktop: false){

    @if $mobile{

        @include font-size($mobile, false);

    }


    @if $tablet{

        @include media-query(tablet-desktop){
            @include font-size($tablet, false);
        }
    }

    @if $desktop{

        @include media-query(desktop){
            @include font-size($desktop, false);
        }
    }
}

/**
 * Rem Units
 * Converts properties to both REM and Pixel Values. Based on line-height
 * @include rem(margin-bottom, 0.5)
 * @include rem(padding, 1, 20px);
 */

@mixin rem($property, $multiplier: 1, $unit: $base-spacing-unit){

  @if type-of($multiplier) != "number"{

    $unit: $multiplier;
    $multiplier: 1;
  }

  @include rem-full($multiplier, $property, $unit);
}


/**
 * Helper function for REM
 * @include rem-full(padding, 10px 20px 10px 30px);
 */

@mixin rem-full($multiplier, $property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem * 1;
  // Print the first line in pixel values

  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values * $multiplier;
    #{$property}: $px-values / $baseline-rem * $multiplier;
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    $pixel-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of( $value ) != "number" {
        $rem-values: append($rem-values, $value);
        $pixel-values: append($pixel-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem * $multiplier);
        $pixel-values: append($pixel-values, $value * $multiplier);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $pixel-values;
    #{$property}: $rem-values;
  }
}






/**
 * Media query
 * $breakpoints defined in variables.scss
 */
@mixin media($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{map-get($breakpoints, $name)} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoints}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

/**
 * Grids
 */

/**
 * Calculates Percentage for each column
 */

@function gridCalc($colNumber, $grid-columns: 12) {
  @return percentage(($colNumber / $grid-columns));
}

/**
 * Convert numbers to words
 * 1 => 'one'
 */

@function convert-number-to-word($num) {
  $count:1;
  @each $word in one,two,three,four,five,six,seven,eight,nine,ten,eleven,
    twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,
    twenty,twentyone,twentytwo,twentythree,twentyfour{
    @if ($count == $num) { @return $word; }
    $count: $count + 1;
  }
  @return "invalid";
}


/* Row */

%row{
    max-width: $max-width;
    margin: 0 auto;
    padding: 0 1em;
}

%icon{
  font-family: 'icomoon';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  margin-right: 0.3em;
  display: inline-block;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}